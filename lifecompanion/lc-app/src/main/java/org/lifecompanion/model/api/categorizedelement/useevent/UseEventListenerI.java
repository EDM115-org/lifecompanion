/*
 * LifeCompanion AAC and its sub projects
 *
 * Copyright (C) 2014 to 2019 Mathieu THEBAUD
 * Copyright (C) 2020 to 2021 CMRRF KERPAPE (Lorient, France)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.lifecompanion.model.api.categorizedelement.useevent;

import org.lifecompanion.model.api.categorizedelement.useaction.ActionExecutionResultI;
import org.lifecompanion.model.api.usevariable.UseVariableI;

import java.util.List;
import java.util.function.Consumer;

/**
 * Represent the object that will listen for event generated by {@link UseEventGeneratorI}.<br>
 * It's the role of the {@link UseEventGeneratorI} to call this listener with the appropriated parameters.
 *
 * @author Mathieu THEBAUD <math.thebaud@gmail.com>
 */
public interface UseEventListenerI {

    /**
     * The generator should call this method when a event is generated.<br>
     * This given generator should be the event generator instance (so basically it will be "this" in the calling generator)
     *
     * @param generator the generator that created the event, can't be null.<br>
     *                  It's the generator that will be used to fire the actions.
     * @param variables the variables created by the generator. Can be null if the generator doesn't generate any variable
     * @param callback  the callback that will be called once all the action generated after this event will be executed.<br>
     *                  Can be null if you don't need to know when the action will be finished.
     */
    void fireEvent(UseEventGeneratorI generator, List<UseVariableI<?>> variables, Consumer<ActionExecutionResultI> callback);
}
