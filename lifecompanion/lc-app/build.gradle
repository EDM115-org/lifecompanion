import com.github.jk1.license.render.TextReportRenderer

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
    id 'com.github.jk1.dependency-license-report' version '2.1'
    id 'org.lifecompanion.gradle.plugin.env-conf'
    id 'org.lifecompanion.gradle.plugin.download-jdk-jfx'
    id 'org.lifecompanion.gradle.plugin.publish-application'
}

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.swing', 'javafx.media']
}

compileJava {
    // Unfocusable stage : need internal sun* API
    options.compilerArgs += [
            '--add-exports=javafx.graphics/com.sun.glass.ui=org.lifecompanion.app',
    ]
}

version = project.property('lifecompanion.app.version')
mainClassName = 'org.lifecompanion.LifeCompanion'

ext {
    devCpArg = System.getenv('org.lifecompanion.dev.cp.arg') != null && !System.getenv('org.lifecompanion.dev.cp.arg').isBlank() ? System.getenv('org.lifecompanion.dev.cp.arg') : '/null'
    sharedJvmArgAppTest = [
            // TODO : testing if previous bug are still there
            // Current status :
            // - bug with main scene on loading : preview part has a wrong size (bottom bar + center not working)
            '-Dglass.win.uiScale=150%',

            // Splash screen
            '-splash:data/lifecompanion_splashscreen.png',

            // Unfocusable stage : need internal sun* API
            '--add-exports=javafx.graphics/com.sun.glass.ui=org.lifecompanion.app',
            '--add-opens=javafx.graphics/javafx.stage=org.lifecompanion.app',
            '--add-opens=javafx.graphics/com.sun.javafx.tk.quantum=org.lifecompanion.app',

            // ControlsFX : open internal sun* API
            '--add-opens=javafx.base/com.sun.javafx.runtime=org.controlsfx.controls',
            '--add-opens=javafx.base/com.sun.javafx.collections=org.controlsfx.controls',
            '--add-opens=javafx.graphics/com.sun.javafx.css=org.controlsfx.controls',
            '--add-opens=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls',
            '--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls',
            '--add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls',
            '--add-opens=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls',
            '--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls',
            '--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls'
    ]
}

// Application run in dev only
application {
    mainModule = 'org.lifecompanion.app'
    applicationDefaultJvmArgs = sharedJvmArgAppTest + [
            // Plugin
            '-cp', devCpArg,

            // Debug args (VisualVM)
            '-Dcom.sun.management.jmxremote.port=9999', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false', // debug only

            // LC dev mode
            '-Dorg.lifecompanion.debug.skip.update.check=true',
            '-Dorg.lifecompanion.load.plugins.from.cp=true',
            '-Dorg.lifecompanion.kill.sapi.on.launch=true',
            '-Dorg.lifecompanion.debug.loaded.images=true',
            '-Dorg.lifecompanion.debug.configuration.memory.leak=true'
    ]
}

dependencies {
    // Logging
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha4'

    // LifeCompanion framework
    api 'org.lifecompanion:lc-framework-commons-fx:1.0.0'
    api 'org.lifecompanion:lc-framework-client:1.0.0'

    // For char predictor
    api 'net.sf.trove4j:trove4j:3.0.3'

    // Reflection tool (to detect use action, event, etc.. implementation)
    api 'io.github.classgraph:classgraph:4.8.72'

    // Word prediction
    api('io.github.mthebaud:predict4all:1.2.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    // Used to communication with Windows AutoHotKey server (useful for global keyboard events)
    api 'com.sparkjava:spark-core:2.9.3'

    // FX Controls
    api('org.controlsfx:controlsfx:11.1.2') {
        exclude group: 'org.openjfx'
    }
    // Binding helper
    api 'org.fxmisc.easybind:easybind:1.0.3'

    // Create Windows shortcuts for configuration
    api 'com.github.vatbub:mslinks:1.0.5'

    // Configuration export in PDF
    api 'org.apache.pdfbox:pdfbox:2.0.22'

    // Select picture with camera
    // Use our own brij implementation (fix found https://github.com/sarxos/webcam-capture/issues/586 until there is a Java9+ release)
    api 'com.github.lifecompanionaac:BridJ:1.1.0'
    api('com.github.sarxos:webcam-capture:0.3.12') {
        exclude group: 'com.nativelibs4java', module: 'bridj'
        exclude group: 'ch.qos.logback'
    }

    // Tests
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

jlink {
    mergedModule {
        excludeRequires 'javafx.base', 'ch.qos.logback.classic' // easybind use it
    }
    targetPlatform('win_x64') {
        jdkHome = "${project.property('jdk_win_x64')}"
        addExtraModulePath("${project.property('jfx_win_x64')}")
    }
    targetPlatform('linux_x64') {
        jdkHome = "${project.property('jdk_linux_x64')}"
        addExtraModulePath("${project.property('jfx_linux_x64')}")
    }
    targetPlatform('mac_x64') {
        jdkHome = "${project.property('jdk_mac_x64')}"
        addExtraModulePath("${project.property('jfx_mac_x64')}")
    }
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages',
               '--add-modules', 'java.base,jdk.localedata,jdk.crypto.cryptoki,jdk.crypto.ec']
// locale data - translations / crypto - email
}

licenseReport {
    configurations = ALL
    // Exclude IDE and own dependencies from licence report
    excludeGroups = ['org.jetbrains', 'org.jetbrains.kotlin', 'org.lifecompanion']
    renderers = [new TextReportRenderer()]
}

processResources {
    outputs.upToDateWhen { false }
    dependsOn generateLicenseReport
    filesMatching('**app.properties') {
        expand(
                'appId': appId,
                'version': project.version,
                'buildDate': new Date().getTime(),
                'updateServerUrl': project.property('lifecompanion.framework.server.url'),
                'appServerUrl': project.property('lifecompanion.app.server.url'),
                'appServerQueryParameters': project.property('lifecompanion.app.server.query.parameters'),
                'installationPublicKey': project.property('lifecompanion.app.server.public_key')
        )
    }
    from('/build/reports/dependency-license/') {
        include 'THIRD-PARTY-NOTICES.txt'
    }
    from('../../') {
        include 'LICENSE'
    }
}