plugins {
    id 'edu.sc.seis.launch4j' version '3.0.5'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
}

ext {
    mainClassNameWithoutModule = 'org.lifecompanion.launcher.LauncherApplication'
}

dependencies {
    implementation 'org.lifecompanion:lc-framework-commons:1.0.0'
}

jar {
    manifest {
        attributes 'Main-Class': "$mainClassNameWithoutModule"
    }
    from {
        configurations.runtimeClasspath.filter({ (it.name.startsWith('org.lifecompanion.launcher') || it.name.startsWith('org.lifecompanion.framework.commons')) }).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

launch4j {
    mainClassName = "$mainClassNameWithoutModule"
    bundledJrePath = './application;./update' // try to use the one the available JRE (will be matched with jreMinVersion)
    jreMinVersion = "$project.targetCompatibility"
    outputDir = 'launchers/WINDOWS'
    outfile = 'LifeCompanion.exe'
    copyright = 'Mathieu THEBAUD'
    companyName = 'CMRRF Kerpape'
    fileDescription = 'LifeCompanion'
    productName = 'LifeCompanion'
    internalName = 'LifeCompanion'
    icon = "${projectDir}/build-src/lifecompanion_icon.ico"
}

task prepareLaunchers {
    group 'lifecompanion'
    dependsOn 'clean'
    dependsOn prepareSHLauncher('MAC')
    dependsOn prepareSHLauncher('UNIX')
    dependsOn 'createExe'
}

def prepareSHLauncher(String system) {
    return tasks.create("prepareSh${system}", Copy) {
        group = 'lifecompanion'
        description '(INTERNAL TASK) Prepare the template SH script for Unix and Mac launchers'
        outputs.upToDateWhen { false }
        from file("$buildDir/../build-src/lifecompanion.sh")
        into file("$buildDir/launchers/$system")
    }
}